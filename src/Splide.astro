---
// Copyright (c) Pascal Brand
// MIT License

// TODO: align to react-splide (see docs at https://splidejs.com/integration/react-splide/)
// TODO: check 2 slides in the same page

import type { HTMLAttributes } from 'astro/types';
import type { Options } from '@splidejs/splide';

interface SplideHTMLAttributes extends HTMLAttributes<"div">
// TODO Partial<Omit<HTMLAttributes<HTMLElement>, keyof DOMAttributes<HTMLElement>>> {}
{
}

interface Props extends
  SplideHTMLAttributes
  // TODO ,Partial<SplideEventHandlers>
  // TODO Partial<Omit<HTMLAttributes<HTMLElement>, keyof DOMAttributes<HTMLElement>>>
{
  options?: Options;
  hasTrack?: boolean;
  tag: 'div' | 'section' | 'header' | 'footer' | 'nav';
  // TODO extensions?: Record<string, ComponentConstructor>;
  // TODO transition?: ComponentConstructor;
  // TODO children?: React.ReactNode;
}

const {
  class: className,   // the class to add to "splide"
  tag="div",
  options={},
  hasTrack=true,
  ...props      // the other props, which are SplideHtmlAttributes, such as aria-label,... but not class as already get
} = Astro.props;

---

<astro-splide data-options={JSON.stringify(options)}>
  <div class={(className ? ("splide " + className) : "splide")} {...props}>
    <div class="splide__track">
      <ul class="splide__list">
        <slot />
      </ul>
    </div>
  </div>
</astro-splide>

<script>
  import Splide from "@splidejs/splide";

  // define custom element to get splide options
  class AstroSplides extends HTMLElement {
    connectedCallback() {
      // Read the options from the data attribute of astro-splide.
      const options = JSON.parse(this.dataset.options || '');
      let splide = new Splide(".splide", options);
      splide.mount();
    }
  }
  customElements.define("astro-splide", AstroSplides);
</script>
