---
// Copyright (c) Pascal Brand
// MIT License

// TODO: align to react-splide (see docs at https://splidejs.com/integration/react-splide/)
// - events
// - extensions?: Record<string, ComponentConstructor>;
// - transition?: ComponentConstructor;
// - children?: React.ReactNode;

// TODO: check 2 slides in the same page

import type { HTMLAttributes } from 'astro/types';
import type { Options } from '@splidejs/splide';
import SplideTrack from './SplideTrack.astro'

interface SplideHtmlAttributes extends HTMLAttributes<"div">
{
  options?: Options;
  hasTrack?: boolean;
  tag?: 'div' | 'section' | 'header' | 'footer' | 'nav';
}

type Props = SplideHtmlAttributes

const {
  class: className ="",   // the class to add to "splide"
  tag: Root ="div",
  options={},
  hasTrack=true,
  ...props      // the other props, which are SplideHtmlAttributes, such as aria-label,... but not class as already get
} = Astro.props;

---

<astro-splide data-options={JSON.stringify(options)}>
  <Root class={"splide " + className} {...props}>
    { hasTrack  &&  (<SplideTrack> <slot /> </SplideTrack>) }
    { !hasTrack &&  (<slot />) }
  </Root>
</astro-splide>

<script>
  import Splide from "@splidejs/splide";

  // define custom element to get splide options
  class AstroSplides extends HTMLElement {
    connectedCallback() {
      // Read the options from the data attribute of astro-splide.
      const options = JSON.parse(this.dataset.options || '');
      let splide = new Splide(".splide", options);
      splide.mount();
    }
  }
  customElements.define("astro-splide", AstroSplides);
</script>
